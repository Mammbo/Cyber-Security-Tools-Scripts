#!/usr/bin/env python3

# nmap scan and pentest

import csv
import os
import subprocess
import sys
from datetime import datetime

# download python and all dependencies



def install_dependencies():
    sys_vers = sys.platform

    if sys_vers == 'linux':
    
        with open('/etc/os-release') as f:
            os_release_info = f.read()
    
        if 'ID=debian' in os_release_info or 'ID=ubuntu' in os_release_info or 'ID=kali' in os_release_info:
            commands = [
                "sudo apt update -y",
                "sudo apt upgrade -y",
                "sudo apt-get install nmap -y",
                "sudo apt install -y python3-pip",
                "pip3 install python-nmap"
            ]
        elif 'ID=rhel' in os_release_info or 'ID=centos' in os_release_info or 'ID=fedora' in os_release_info:
            commands = [
                "sudo dnf update -y",
                "sudo dnf upgrade -y",
                "sudo dnf install nmap",
                "sudo dnf install -y python3-pip",
                "sudo pip3 install python-nmap"
            ]
        else:
            print("Unsupported Linux distribution.")
            return

        for cmd in commands:
            subprocess.run(cmd, shell=True, check=True)
    elif sys_vers == 'win32':
        # add this later 
        pass 

install_dependencies()

import nmap 

# get current time

now = datetime.now()

# find size of network

def network(sys_vers): 
    if sys_vers == 'linux':
        grep_inet = ["ip a | grep -Eo '\\b([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]+\\sbrd\\s\\b'"]
        ip_addr_net_mask = subprocess.run(grep_inet, shell=True, text=True, capture_output=True, check=True)
        return ip_addr_net_mask.stdout.strip().replace(' brd','')
    elif sys_vers == 'win32':
        pass
        return str(ip_addr_net_mask.stdout)
    
    else: 
        print('unsupported distro')

# do the network scan
def network_scanner(ip_address):
    host = ip_address
    ns = nmap.PortScanner()

    #intial ip scan for all ip addresses that are up 
    ns.scan(host, '1-65535', '-PR -sn')
    with open('nmap_ipaddresses.txt', 'w') as f:
        for host in ns.all_hosts():
            if ns[host].state() == 'up':
                f.write(f'{host}\n')
        f.close()

    with open('nmap_ipaddresses.txt', 'r') as f:
        ip_list = [line.strip() for line in f]
        
    ip_targets = ' '.join(ip_list)


    try: 
        ns.scan(ip_targets) #arguments='-T5 -p 1-65535 -sV -O -sT -A -Pn '
        ports = ns[host]['tcp'].keys()
        result_list = []
        for port in ports:
            result = {}
            state = ns[host]['tcp'][port]['state']
            service = ns[host]['tcp'][port]['name']
            product = ns[host]['tcp'][port]['name']
            version = ns[host]['tcp'][port]['version']
            vendor = ns[host]['tcp'][port]['vendor']
            OSfamily = ns[host]['tcp'][port]['osfamily']
            OSgen = ns[host]['tcp'][port]['osgen']
            result['port'] = port
            result['state'] = state
            result['service'] = service
            result['product'] = product
            result['version'] = version
            result['vendor'] = vendor
            result['osfamily'] = OSfamily
            result['osgen'] = OSgen

        if state == 'open':
            result_list.append(result)
            print(result_list)
            return(result_list)
    except Exception as e:
        print(e)



host = network(sys_vers)
computer_ip = host.split()
print(computer_ip)
results = network_scanner(computer_ip[0].replace("'", ""))
print(results)
# parse data

# input data into a cleaned csv file

# add time stamp to new file

# after every new scan in automation scan print the ip address in the bottom of the file of new item
