#!/usr/bin/env python3

# nmap scan and pentest

import csv
import os
import subprocess
import sys
from datetime import datetime


# download python and all dependencies
sys_vers = sys.platform
#fix this by using subprocess
if sys_vers == 'linux':
    os.system("source /etc/os-release")

    if os.system('"$ID" == "debian"'):
        os.system(
                "apt update; apt upgrade; apt install nmap; sudo apt install python3-pip; pip install python-nmap; apt-get install python3"
        )

    elif os.system('"$ID" == "rhel"') or os.system('"$ID" == "centos"') or os.system('"$ID" == "fedora"'):
            os.system(
            "dnf update; yum upgrade; sudo dnf install python3-pip; pip install python-nmap; dnf install python"
            )
elif sys_vers == 'win32':
    pass

else:
    print("This script is running on an unsupported distribution.")

import nmap

# get current time

now = datetime.now()

# find size of network

def network(sys_vers): 
    if sys_vers == 'linux':
        grep_inet = ["ip a | grep -Eo '\\b([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]+\\sbrd\\s\\b'"]
        ip_addr_net_mask = subprocess.run(grep_inet, shell=True, text=True, capture_output=True, check=True)
        return ip_addr_net_mask.stdout.strip().replace(' brd','')
    elif sys_vers == 'win32':
        #add this functionality for windows after linux is done 
        pass
        return str(ip_addr_net_mask.stdout)
    
    else: 
        print('unsupported distro')

# do the network scan
def network_scanner(ip_address):
    host = '192.168.207.128'
    ns = nmap.PortScanner()
    network_data = {}

    try: 
        #gather all hosts that are openand and that are scanned
        ns.scan(host, arguments='-T5 -p 1-65535 -sV -O -sT -A -Pn ') 

        for host in ns.all_hosts():
            if ns[host].state() == "up":
                host_data = {
                    'hostname': ns[host].hostname(),
                    'state': ns[host].state(),
                    'protocols': {}
                }
            else:
                pass

        #gather the ports, the state, the service, and the version to then store in the corresponding ip addresses dictionary
    
        for proto in ns[host].all_protocols():
            host_data['protocols'][proto] = []
            lport = sorted(ns[host][proto].keys())
            for port in lport:
                port_info = ns[host][proto][port]
                print(port_info)
                print(type(port_info))
                port_data = {
                    'port': port,
                    'state': port_info['state'],
                    'service': port_info['name'],
                    'product': port_info['product'],
                    'version': port_info['version'],
                    #'vendor': port_info('vendor')
                }
                host_data['protocols'][proto].append(port_data)

        #gather the opearting system information
        os_info = []
        if 'osclass' in ns[host]:
            for osclass in ns[host]['osclass']:
                os_info.append({
                    'vendor': osclass['vendor'],
                    'osfamily': osclass['osfamily'],
                    'osgen': osclass['type'],
                    'accuracy': osclass['accruracy']
                })
        host_data['os_info'] = os_info

        #add this host's data to network dictionary
        network_data[host] = host_data

        for key, value in network_data.items():
            print(f'{key}, {value}')
          
    except Exception as e:
        print(e)


host = network(sys_vers)
computer_ip = host.split()
results = network_scanner(computer_ip[0].replace("'", ""))
# input data into a cleaned csv file and add time stamp to new file
print('your mom :3)')