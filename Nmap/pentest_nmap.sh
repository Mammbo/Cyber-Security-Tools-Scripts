#!/bin/bash 

#this script was made for CCDC regionals 2024 and is supposed to scan your entire network for vulnerablities to then secure (Pentesting)
#Run this script in sudo

#allows for better prompting imo
function prompt {
    if [ "$2" = 'y' ]; then
   	 prompt_text="$1 [Y/n]: "
    elif [ "$2" = 'n' ]; then
   	 prompt_text="$1 [y/N]: "
    else
   	 prompt_text="$1 [y/n]: "
    fi

    while true; do
   	 read -r -p "$prompt_text" input

   	 case "$input" in
   		 [yY][eE][sS]|[yY])
       		 return 1
       		 ;;
   		 [nN][oO]|[nN])
       		 return 0
       		 ;;
   		 "")
       		 if [ "$2" = "y" ]; then return 1
       		 elif [ "$2" = "n" ]; then return 0
       		 else echo "Invalid response"
       		 fi
       		 ;;
   		 *)
       		 echo "Invalid response"
       		 ;;
   	 esac
    done
}

#variables basically 
function reprompt_var {
    local reprompt_text="$1"
    local reprompt_new_val=''
    reprompt_value="${!2}"

    if [ $reprompt_value ]; then reprompt_text+=" [$reprompt_value]: "
    else reprompt_text+=': '; fi

    read -r -p "$reprompt_text" reprompt_new_val

    if [ "$reprompt_new_val" ]; then reprompt_value="$reprompt_new_val"; fi
}


function os_detection {
    # read the contents of the /etc/os-release file
    source /etc/os-release
    # Use conditional statements to detect the distribution
    if [[ "$ID" == "debian" ]]; then
        echo "This script is running on Debian."
        apt update 
        apt upgrade 
        apt install nmap -y 
    elif [[ "$ID" == "rhel" || "$ID" == "centos" || "$ID" == "fedora" ]]; then
    echo "This script is running on Red Hat, CentOS, or Fedora."
        yum update 
        yum upgrade 
        yum install nano 
        yum install nmap -y
        dnf update 
        dnf upgrade 
        dnf install nano 
        dnf -y install nmap
    else
        echo "This script is running on an unsupported distribution."
    fi
}

function nmap_scan {
    route
    reprompt_var 'route of network should be under destination' network 
    network="$reprompt_value"

    ipaddr = $(ip a | grep inet)

    #stores all ips needed into a text file 
    nmap -PR -sn "$network"/24 | awk '/Nmap scan/{gsub(/[()]/,"",$NF); print $NF > nmap_scanned_ips.txt}'

    #default nmap scans 
    nmap -iL nmap_scanned_ips.txt >> nmap_scan_results.txt
    #port scan 
    nmap -sS -oN -iL nmap_scanned_ips.txt >> nmap_scan_ports.txt
    nmap -sT -oN -iL nmap_scanned_ips.txt >> nmap_scan_ports.txt
    nmap -sU -oN -iL nmap_scanned_ips.txt >> nmap_scan_ports.txt
    nmap -sY -oN -iL nmap_scanned_ips.txt >> nmap_scan_ports.txt
    nmap -sN -oN -iL nmap_scanned_ips.txt >> nmap_scan_ports.txt
    #OS scan 
    nmap -O -oN -iL nmap_scanned_ips.txt  >> nmap_scan_results.txt
    #service and version scan 
    nmap -sV -iL nmap_scanned_ips.txt  >> nmap_scan_results.txt

    #vulnerability scans 
    nmap -iL nmap_scanned_ips.txt --script smb-vuln-ms17-010.nse >> nmap_vuln_scans.txt
    nmap -iL nmap_scanned-ips.txt --script ftp-vsftpd-backdoor -p 21 >> nmap_vuln_scans.txt
    #all vuln scans 
    nmap -iL nmap_scanned_ips.txt --script vuln >> nmap_vuln_scans.txt

    echo("Thank you for scanning have a good day!")

}
while True: 
    account_status = id -u 
    if account_status =! 0
        echo("Run this script in root!")
    else 
        echo("okay :)")
        os_detection
        nmap_scan    
    fi 
done 



